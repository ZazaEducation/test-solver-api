{
  "permissions": {
    "allow": [
      "Bash",
      "Edit",
      "MultiEdit",
      "Write",
      "Bash(python:*)",
      "Bash(pip:*)",
      "Bash(pytest:*)",
      "Bash(uvicorn:*)",
      "Bash(black:*)",
      "Bash(ruff:*)",
      "Bash(mypy:*)",
      "Bash(git:*)"
    ],
    "deny": [
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(rm -rf:*)"
    ],
    "defaultMode": "default"
  },
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "60000",
    "BASH_MAX_OUTPUT_LENGTH": "20000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "PYTHONPATH": "src",
    "VIRTUAL_ENV": "venv"
  },
  "includeCoAuthoredBy": true,
  "cleanupPeriodDays": 30,
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.file_path // \"\"'); CONTENT=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.content // \"\"'); if [[ \"$FILE\" =~ \\.py$ ]] && echo \"$CONTENT\" | grep -q 'print('; then echo 'Warning: print() statements should use logger instead' >&2; exit 2; fi"
          },
          {
            "type": "command",
            "command": "FILE=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == \"pyproject.toml\" ]]; then echo 'Checking Python dependencies...'; pip check || true; fi",
            "timeout": 60
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.py$ ]] && command -v black >/dev/null 2>&1; then black \"$FILE\" || true; fi",
            "timeout": 30
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.py$ ]] && command -v mypy >/dev/null 2>&1; then RESULT=$(mypy \"$FILE\" 2>&1); if [ $? -ne 0 ]; then echo \"MyPy errors found: $RESULT\" >&2; fi; fi",
            "timeout": 30
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.py$ ]] && grep -q 'from .* import \\*' \"$FILE\"; then echo 'Warning: Avoid wildcard imports for better code clarity' >&2; exit 2; fi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo \"$STDIN_JSON\" | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.py$ && \"$FILE\" != *\"test_\"* && \"$FILE\" != *\"_test.py\" ]] && command -v pytest >/dev/null 2>&1; then DIR=$(dirname \"$FILE\"); BASENAME=$(basename \"$FILE\" .py); for TEST_FILE in \"$DIR/test_$BASENAME.py\" \"tests/test_$BASENAME.py\" \"tests/unit/test_$BASENAME.py\"; do if [ -f \"$TEST_FILE\" ]; then echo \"Running tests for $TEST_FILE...\"; pytest \"$TEST_FILE\" -v || true; break; fi; done; fi",
            "timeout": 60
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"Claude Code notification: $(date)\" >> ~/.claude/notifications.log"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ -d .git && -f pyproject.toml ]] && command -v ruff >/dev/null 2>&1; then CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR | grep -E '\\.py$' || true); if [[ -n \"$CHANGED_FILES\" ]]; then echo 'Running linter on changed Python files...'; ruff check $CHANGED_FILES || true; fi; fi",
            "timeout": 60
          }
        ]
      },
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ -d .git && -f pyproject.toml ]] && command -v mypy >/dev/null 2>&1; then CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR | grep -E '\\.py$' | grep -v test_ || true); if [[ -n \"$CHANGED_FILES\" ]]; then echo 'Running type checks on changed files...'; mypy $CHANGED_FILES || true; fi; fi",
            "timeout": 60
          }
        ]
      }
    ]
  }
}